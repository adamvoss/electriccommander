<?xml version="1.0" encoding="UTF-8"?>
<exportedData xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="commander.xsd" version="55" buildLabel="build_4.1_50466_2012.05.09_07:40:31" buildVersion="4.1.0.50466" passkey="1a4bf23cbae2b9cdda9df148b44f628713080809">
  <exportPath>/projects/workflowTimer</exportPath>
  <project>
    <projectName>workflowTimer</projectName>
    <description>&lt;html&gt;&lt;b&gt;Workflow Timer&lt;/b&gt; - a library project to support and manage timed workflow transitions&lt;/html&gt;&#10;</description>
    <resourceName>local</resourceName>
    <workspaceName>default</workspaceName>
    <propertySheet>
      <property>
        <propertyName>ec_tags</propertyName>
        <expandable>1</expandable>
        <value>  </value>
      </property>
      <property>
        <propertyName>tz</propertyName>
        <description>Local Timezone to be used when converting time values</description>
        <expandable>0</expandable>
        <value>CST5CDT</value>
      </property>
      <property>
        <propertyName>wftimer.pl</propertyName>
        <description></description>
        <expandable>0</expandable>
        <value>#!/bin/perl&#10;# wftimer - a tool to perform scheduled transitions for workflows.&#10;#&#10;# This code is intended to run from a scheduled procedure.  It locates all&#10;# active workflows where the "wft_transition_time" property value occurs&#10;# in the past, and for each workflow thus found, it performs the manual&#10;# transition named in the "wft_transition_name" property (after setting&#10;# the "wft_transitioned" property, which is used to exclude workflows that&#10;# have already been transitioned).&#10;&#10;use strict;&#10;use ElectricCommander;&#10;&#10;my $debug = 1;&#10;&#10;# Find out when "now" is in a string we can use with findObjects()&#10;my ($sec,$min,$hour,$mday,$mon,$year,$wday, $yday) = gmtime();&#10;my $timeNow = sprintf("%04d-%02d-%02dT%02d:%02d:%02d.000Z",&#10;		  $year + 1900, $mon + 1, $mday, $hour, $min, $sec);&#10;print "Time now is: $timeNow\n";&#10;&#10;my $ec = new ElectricCommander();&#10;my $xp = $ec-&gt;findObjects("transition", {&#10;    maxIds =&gt; 0,&#10;    sort =&gt; [ {propertyName =&gt; "projectName",  order =&gt; 'ascending'},&#10;	      {propertyName =&gt; "workflowName", order =&gt; 'ascending'},&#10;	      {propertyName =&gt; "stateName",    order =&gt; 'ascending'},&#10;	      {propertyName =&gt; "index",        order =&gt; 'ascending'} ],&#10;    select =&gt; [ {propertyName =&gt; "wftTransitionTime"},&#10;		{propertyName =&gt; "wftTransitioned"} ],&#10;    filter =&gt; [&#10;	       {operator    =&gt; "and",&#10;	        filter =&gt; [ {propertyName =&gt; "trigger",&#10;			     operator     =&gt; "equals",&#10;			     operand1     =&gt; "manual"},&#10;			    {propertyName =&gt; "wftTransitionTime",&#10;			     operator     =&gt; "lessOrEqual",&#10;			     operand1     =&gt; $timeNow},&#10;			    {propertyName =&gt; "wftTransitioned",&#10;			     operator     =&gt; "isNull"},&#10;		          ],&#10;	       },&#10;	     ],&#10;	}&#10;    );&#10;print "findObjects:\n" . $xp-&gt;findnodes_as_string("/") . "\n" if ($debug &gt; 2);&#10;&#10;my %haveSeenWF = ();&#10;&#10;my $objectNodeset = $xp-&gt;find('/responses/response/object');&#10;foreach my $o ( $objectNodeset-&gt;get_nodelist() ) {&#10;    print "\nProcessing Node:\n" . XML::XPath::XMLParser::as_string($o) . "\n" if ($debug &gt; 1);&#10;    my $objectId = $xp-&gt;find('./objectId', $o)-&gt;string_value();&#10;    my $project = $xp-&gt;find('./transition/projectName', $o)-&gt;string_value();&#10;    my $workflow = $xp-&gt;find('./transition/workflowName', $o)-&gt;string_value();&#10;    my $state = $xp-&gt;find('./transition/stateName', $o)-&gt;string_value();&#10;    my $transition = $xp-&gt;find('./transition/transitionName', $o)-&gt;string_value();&#10;    my $target = $xp-&gt;find('./transition/targetState', $o)-&gt;string_value();&#10;    my $index = $xp-&gt;find('./transition/index', $o)-&gt;string_value();&#10;&#10;    my $wfxp = $ec-&gt;getWorkflow($project, $workflow);&#10;    my $activeState = $wfxp-&gt;find('/responses/response/workflow/activeState')-&gt;string_value();&#10;    my $completed = $wfxp-&gt;find('/responses/response/workflow/completed')-&gt;string_value();&#10;    my $workflowId = $wfxp-&gt;find('/responses/response/workflow/workflowId')-&gt;string_value();&#10;&#10;    print "($objectId) $project $workflow " if ($debug);&#10;    if ($completed) {&#10;	print "(completed)\n" if ($debug);&#10;	next;&#10;    }&#10;&#10;    print "$state " if ($debug);&#10;    if ($state ne $activeState) {&#10;	print "(inactive state)\n" if ($debug);&#10;	next;&#10;    }&#10;&#10;    print  "\"$transition\" ($index) -&gt; \"$target\"\n" if ($debug);&#10;&#10;    if ($haveSeenWF{$workflowId}) {&#10;	print "Workflow \"$workflow\": already transitioned, skipping \"$transition\" ($index) -&gt; \"$target\"\n";&#10;    } else {&#10;	$haveSeenWF{$workflowId}++;&#10;	print "Workflow \"$workflow\": performing transition \"$transition\" ($index) -&gt; \"$target\"\n";&#10;        my $pxp = $ec-&gt;setProperty('wftTransitioned', '1', {objectId=&gt;$objectId});&#10;	my $txp = $ec-&gt;transitionWorkflow($project, $workflow, $state, $transition);&#10;    }&#10;}&#10;</value>
      </property>
    </propertySheet>
    <procedure>
      <procedureName>tick</procedureName>
      <description>&lt;html&gt;&lt;i&gt;Timer Tick&lt;/i&gt; - a procedure executed periodically via schedule that looks for workflow transitions to be performed.&lt;/html&gt;</description>
      <jobNameTemplate></jobNameTemplate>
      <resourceName>local</resourceName>
      <workspaceName>default</workspaceName>
      <propertySheet>
      </propertySheet>
      <step>
        <stepName>Find and execute transitions</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <command>$[/myProject/wftimer.pl]</command>
        <condition></condition>
        <description>An ec-perl step that uses findObjects to locate all transitions that are ready to be transitioned, and executes those transitions</description>
        <errorHandling>abortProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <logFileName></logFileName>
        <parallel>0</parallel>
        <postProcessor></postProcessor>
        <releaseMode>none</releaseMode>
        <resourceName></resourceName>
        <shell>ec-perl</shell>
        <timeLimit>15</timeLimit>
        <timeLimitUnits>minutes</timeLimitUnits>
        <workingDirectory></workingDirectory>
        <workspaceName></workspaceName>
        <propertySheet>
          <property>
            <propertyName>ec_customEditorData</propertyName>
            <propertySheet>
              <property>
                <propertyName>formType</propertyName>
                <expandable>1</expandable>
                <value>command</value>
              </property>
            </propertySheet>
          </property>
        </propertySheet>
      </step>
      <step>
        <stepName>cleanup</stepName>
        <alwaysRun>1</alwaysRun>
        <broadcast>0</broadcast>
        <command># Cleanup: liberally re-used from ElectricSentry::Driver.pm&#10;#&#10;# Copyright (c) 2006-2009 Electric Cloud, Inc.&#10;# All rights reserved&#10;&#10;use strict;&#10;use ElectricCommander;&#10;use XML::XPath;&#10;&#10;#-------------------------------------------------------------------------&#10;# Cleanup&#10;#-------------------------------------------------------------------------&#10;&#10;my $ec = ElectricCommander-&gt;new();&#10;&#10;# Check for the OS Type&#10;my $osIsWindows = $^O =~ /MSWin/;&#10;&#10;#  Find all previous runs of this job&#10;my @filterList;&#10;push(&#10;    @filterList,&#10;    {&#10;	"propertyName" =&gt; "projectName",&#10;	"operator"     =&gt; "equals",&#10;	"operand1"     =&gt; '$[/myProject/projectName]'&#10;    }&#10;);&#10;push(&#10;    @filterList,&#10;    {&#10;        "propertyName" =&gt; "procedureName",&#10;        "operator"     =&gt; "equals",&#10;        "operand1"     =&gt; '$[/myProcedure/procedureName]'&#10;    }&#10;);&#10;push(&#10;    @filterList,&#10;    {&#10;        "propertyName" =&gt; "status",&#10;        "operator"     =&gt; "equals",&#10;        "operand1"     =&gt; "completed"&#10;    }&#10;);&#10;&#10;# Run the Query&#10;my $xPath = $ec-&gt;findObjects("job", {numObjects =&gt; "500", filter =&gt; \@filterList});&#10;&#10;# Loop over all returned jobs&#10;my $nodeset = $xPath-&gt;find('//job');&#10;foreach my $node ( $nodeset-&gt;get_nodelist ) {&#10;&#10;    #  Find the workspaces (there can be more than one if some steps&#10;    #  were configured to use a different workspace&#10;    my $jobId   = $xPath-&gt;findvalue( 'jobId',   $node );&#10;    my $jobName = $xPath-&gt;findvalue( 'jobName', $node );&#10;    my $xPath = $ec-&gt;getJobInfo($jobId);&#10;    my $wsNodeset = $xPath-&gt;find('//job/workspace');&#10;    foreach my $wsNode ( $wsNodeset-&gt;get_nodelist ) {&#10;&#10;        my $workspace;&#10;        if ($osIsWindows) {&#10;            $workspace = $xPath-&gt;findvalue( './winUNC', $wsNode );&#10;            $workspace =~ s/\/\//\\\\/g;&#10;        } else {&#10;            $workspace = $xPath-&gt;findvalue( './unix', $wsNode );&#10;        }&#10;&#10;        # Delete the workspace (after checking its name as a sanity test)&#10;        # look for "job_nnn" or "ElectricSentry-nnn"&#10;        if ( $workspace =~ /[-_][\d]+$/ ) {&#10;            use File::Path;&#10;            rmtree( [$workspace] );&#10;            print "Deleted workspace - $workspace\n";&#10;        }&#10;    }&#10;&#10;    # Delete the job&#10;    $ec-&gt;deleteJob($jobId);&#10;    print "Deleted job - $jobName\n";&#10;}&#10;</command>
        <condition></condition>
        <description>Cleans up old job records.</description>
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <logFileName></logFileName>
        <parallel>0</parallel>
        <postProcessor></postProcessor>
        <releaseMode>none</releaseMode>
        <resourceName></resourceName>
        <shell>ec-perl</shell>
        <timeLimit>5</timeLimit>
        <timeLimitUnits>minutes</timeLimitUnits>
        <workingDirectory></workingDirectory>
        <workspaceName></workspaceName>
        <propertySheet>
          <property>
            <propertyName>ec_customEditorData</propertyName>
            <propertySheet>
              <property>
                <propertyName>formType</propertyName>
                <expandable>1</expandable>
                <value>command</value>
              </property>
            </propertySheet>
          </property>
        </propertySheet>
      </step>
    </procedure>
    <procedure>
      <procedureName>TransitionAt</procedureName>
      <description>Library sub-procedure used to mark a transition to transition at a specific time.</description>
      <jobNameTemplate></jobNameTemplate>
      <resourceName></resourceName>
      <workspaceName></workspaceName>
      <propertySheet>
        <property>
          <propertyName>ec_customEditorData</propertyName>
          <propertySheet>
            <property>
              <propertyName>parameters</propertyName>
              <propertySheet>
                <property>
                  <propertyName>n</propertyName>
                  <propertySheet>
                    <property>
                      <propertyName>formType</propertyName>
                      <expandable>1</expandable>
                      <value>standard</value>
                    </property>
                  </propertySheet>
                </property>
                <property>
                  <propertyName>transition</propertyName>
                  <propertySheet>
                    <property>
                      <propertyName>formType</propertyName>
                      <expandable>1</expandable>
                      <value>standard</value>
                    </property>
                  </propertySheet>
                </property>
                <property>
                  <propertyName>units</propertyName>
                  <propertySheet>
                    <property>
                      <propertyName>options</propertyName>
                      <propertySheet>
                        <property>
                          <propertyName>list</propertyName>
                          <expandable>1</expandable>
                          <value>minutes|hours|days</value>
                        </property>
                        <property>
                          <propertyName>type</propertyName>
                          <expandable>1</expandable>
                          <value>simpleList</value>
                        </property>
                      </propertySheet>
                    </property>
                    <property>
                      <propertyName>formType</propertyName>
                      <expandable>1</expandable>
                      <value>standard</value>
                    </property>
                  </propertySheet>
                </property>
                <property>
                  <propertyName>when</propertyName>
                  <propertySheet>
                    <property>
                      <propertyName>formType</propertyName>
                      <expandable>1</expandable>
                      <value>standard</value>
                    </property>
                  </propertySheet>
                </property>
              </propertySheet>
            </property>
          </propertySheet>
        </property>
      </propertySheet>
      <formalParameter>
        <formalParameterName>transition</formalParameterName>
        <defaultValue></defaultValue>
        <description>Enter the name of the transition that should be taken when the time expires.  This transition must a transition out of the current state in the current workflow.</description>
        <expansionDeferred>0</expansionDeferred>
        <required>1</required>
        <type>entry</type>
      </formalParameter>
      <formalParameter>
        <formalParameterName>when</formalParameterName>
        <defaultValue></defaultValue>
        <description>Date/Time at which the transition should occur.</description>
        <expansionDeferred>0</expansionDeferred>
        <required>1</required>
        <type>entry</type>
      </formalParameter>
      <step>
        <stepName>Mark Transition</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <command>#!ec-perl&#10;use strict;&#10;use ElectricCommander;&#10;use Date::Manip;&#10;&#10;# Input parameters (expanded in-line by Commander for us)&#10;my $transition = '$[transition]';&#10;my $when = '$[when]';&#10;my $tz = '$[/myProject/tz]';&#10;&#10;# Define the local timezone from the property in this project&#10;Date::Manip::Date_Init('TodayIsMidnight=1', 'TZ=' . $tz);&#10;&#10;# Parse the "vague" human-type date string&#10;my $d = Date::Manip::ParseDate($when);&#10;&#10;# Convert to UTC&#10;$d = Date::Manip::Date_ConvTZ($d, '', 'UTC' );&#10;&#10;# And finally create the Commander-style time/date string&#10;my $timeThen = Date::Manip::UnixDate($d, '%Y-%m-%dT%H:%M:%S.000Z');&#10;&#10;# Compute the path to the transition in question&#10;my $tpath = '/myState/transitions/' . $transition;&#10;&#10;# Set the correct property (and clean up old ones, just in case)&#10;my $ec = ElectricCommander-&gt;new();&#10;$ec-&gt;setProperty($tpath . '/wftTransitionTime', $timeThen);&#10;$ec-&gt;abortOnError(0);&#10;$ec-&gt;deleteProperty($tpath . '/wftTransitioned');&#10;$ec-&gt;abortOnError(1);&#10;&#10;# Done.&#10;</command>
        <condition></condition>
        <description></description>
        <errorHandling>abortProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <logFileName></logFileName>
        <parallel>0</parallel>
        <postProcessor></postProcessor>
        <releaseMode>none</releaseMode>
        <resourceName></resourceName>
        <shell>ec-perl</shell>
        <timeLimit></timeLimit>
        <timeLimitUnits>minutes</timeLimitUnits>
        <workingDirectory></workingDirectory>
        <workspaceName></workspaceName>
        <propertySheet>
          <property>
            <propertyName>ec_customEditorData</propertyName>
            <propertySheet>
              <property>
                <propertyName>formType</propertyName>
                <expandable>1</expandable>
                <value>command</value>
              </property>
            </propertySheet>
          </property>
        </propertySheet>
      </step>
    </procedure>
    <procedure>
      <procedureName>TransitionIn</procedureName>
      <description>Library sub-procedure used to mark a transition to transition in a specified time from now.</description>
      <jobNameTemplate></jobNameTemplate>
      <resourceName></resourceName>
      <workspaceName></workspaceName>
      <propertySheet>
        <property>
          <propertyName>ec_customEditorData</propertyName>
          <propertySheet>
            <property>
              <propertyName>parameters</propertyName>
              <propertySheet>
                <property>
                  <propertyName>n</propertyName>
                  <propertySheet>
                    <property>
                      <propertyName>formType</propertyName>
                      <expandable>1</expandable>
                      <value>standard</value>
                    </property>
                  </propertySheet>
                </property>
                <property>
                  <propertyName>transition</propertyName>
                  <propertySheet>
                    <property>
                      <propertyName>formType</propertyName>
                      <expandable>1</expandable>
                      <value>standard</value>
                    </property>
                  </propertySheet>
                </property>
                <property>
                  <propertyName>units</propertyName>
                  <propertySheet>
                    <property>
                      <propertyName>options</propertyName>
                      <propertySheet>
                        <property>
                          <propertyName>list</propertyName>
                          <expandable>1</expandable>
                          <value>minutes|hours|days</value>
                        </property>
                        <property>
                          <propertyName>type</propertyName>
                          <expandable>1</expandable>
                          <value>simpleList</value>
                        </property>
                      </propertySheet>
                    </property>
                    <property>
                      <propertyName>formType</propertyName>
                      <expandable>1</expandable>
                      <value>standard</value>
                    </property>
                  </propertySheet>
                </property>
              </propertySheet>
            </property>
          </propertySheet>
        </property>
      </propertySheet>
      <formalParameter>
        <formalParameterName>n</formalParameterName>
        <defaultValue></defaultValue>
        <description>Number of seconds, minutes, hours, or days in the future when the transition should occur</description>
        <expansionDeferred>0</expansionDeferred>
        <required>1</required>
        <type>entry</type>
      </formalParameter>
      <formalParameter>
        <formalParameterName>transition</formalParameterName>
        <defaultValue></defaultValue>
        <description>Enter the name of the transition that should be taken when the time expires.  This transition must a transition out of the current state in the current workflow.</description>
        <expansionDeferred>0</expansionDeferred>
        <required>1</required>
        <type>entry</type>
      </formalParameter>
      <formalParameter>
        <formalParameterName>units</formalParameterName>
        <defaultValue>minutes</defaultValue>
        <description>Select the desired units - minutes, hours, or days</description>
        <expansionDeferred>0</expansionDeferred>
        <required>1</required>
        <type>select</type>
      </formalParameter>
      <step>
        <stepName>Mark Transition</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <command>#!ec-perl&#10;use ElectricCommander;&#10;use strict;&#10;&#10;# Define parameters (expanded in-line by Commander for us)&#10;my $n = '$[n]';&#10;my $units = '$[units]';&#10;my $transition = '$[transition]';&#10;&#10;# Calculate the real value for n in seconds&#10;if ($units eq 'days') {&#10;    $n = $n * 60 * 60 * 24;&#10;} elsif ($units eq 'hours') {&#10;    $n = $n * 60 * 60;&#10;} else {&#10;    $n = $n * 60;&#10;}&#10;&#10;# Get the time value for the specified time in the future&#10;my $then = time() + $n;&#10;&#10;# Convert to the correctly-formatted time string, in UTC&#10;my ($sec,$min,$hour,$mday,$mon,$year,$wday, $yday) = gmtime($then);&#10;my $timeThen = sprintf("%04d-%02d-%02dT%02d:%02d:%02d.000Z",&#10;		       $year + 1900, $mon + 1, $mday, $hour, $min, $sec);&#10;&#10;# Compute the path to the transition in question&#10;my $tpath = '/myState/transitions/' . $transition;&#10;&#10;# Set the correct property (and clean up old ones, just in case)&#10;my $ec = ElectricCommander-&gt;new();&#10;$ec-&gt;setProperty($tpath . '/wftTransitionTime', $timeThen);&#10;$ec-&gt;abortOnError(0);&#10;$ec-&gt;deleteProperty($tpath . '/wftTransitioned');&#10;$ec-&gt;abortOnError(1);&#10;&#10;# Done.&#10;</command>
        <condition></condition>
        <description></description>
        <errorHandling>abortProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <logFileName></logFileName>
        <parallel>0</parallel>
        <postProcessor></postProcessor>
        <releaseMode>none</releaseMode>
        <resourceName></resourceName>
        <shell>ec-perl</shell>
        <timeLimit></timeLimit>
        <timeLimitUnits>minutes</timeLimitUnits>
        <workingDirectory></workingDirectory>
        <workspaceName></workspaceName>
        <propertySheet>
          <property>
            <propertyName>ec_customEditorData</propertyName>
            <propertySheet>
              <property>
                <propertyName>formType</propertyName>
                <expandable>1</expandable>
                <value>command</value>
              </property>
            </propertySheet>
          </property>
        </propertySheet>
      </step>
    </procedure>
    <schedule>
      <scheduleName>workflowTick</scheduleName>
      <beginDate></beginDate>
      <description>The schedule that periodically runs the workflow timer tick procedure</description>
      <endDate></endDate>
      <interval>3</interval>
      <intervalUnits>minutes</intervalUnits>
      <misfirePolicy>ignore</misfirePolicy>
      <monthDays></monthDays>
      <priority>normal</priority>
      <procedureName>tick</procedureName>
      <scheduleDisabled>0</scheduleDisabled>
      <startTime>05:00</startTime>
      <stopTime>23:00</stopTime>
      <timeZone>America/Chicago</timeZone>
      <weekDays></weekDays>
      <propertySheet>
        <property>
          <propertyName>ec_customEditorData</propertyName>
          <propertySheet>
            <property>
              <propertyName>formType</propertyName>
              <expandable>1</expandable>
              <value>standard</value>
            </property>
          </propertySheet>
        </property>
      </propertySheet>
    </schedule>
    <workflowDefinition>
      <workflowDefinitionName>Test-inTheFuture</workflowDefinitionName>
      <description>Runs a workflow that waits until some time in the future, specified at start time</description>
      <workflowNameTemplate></workflowNameTemplate>
      <propertySheet>
      </propertySheet>
      <stateDefinition>
        <stateDefinitionName>Begin</stateDefinitionName>
        <description>A fine place to start</description>
        <startable>1</startable>
        <subprocedure>TransitionAt</subprocedure>
        <subproject></subproject>
        <substartingState></substartingState>
        <subworkflowDefinition></subworkflowDefinition>
        <actualParameters>
          <property>
            <propertyName>transition</propertyName>
            <expandable>1</expandable>
            <value>time expired</value>
          </property>
          <property>
            <propertyName>when</propertyName>
            <expandable>1</expandable>
            <value>$[waitUntil]</value>
          </property>
        </actualParameters>
        <propertySheet>
          <property>
            <propertyName>ec_customEditorData</propertyName>
            <propertySheet>
              <property>
                <propertyName>parameters</propertyName>
                <propertySheet>
                  <property>
                    <propertyName>waitUntil</propertyName>
                    <propertySheet>
                      <property>
                        <propertyName>formType</propertyName>
                        <expandable>1</expandable>
                        <value>standard</value>
                      </property>
                    </propertySheet>
                  </property>
                </propertySheet>
              </property>
            </propertySheet>
          </property>
        </propertySheet>
        <formalParameter>
          <formalParameterName>waitUntil</formalParameterName>
          <defaultValue></defaultValue>
          <description>Enter the human-readable date/time at which this workflow should automatically transition to the completed state.</description>
          <expansionDeferred>0</expansionDeferred>
          <required>1</required>
          <type>entry</type>
        </formalParameter>
        <transitionDefinition>
          <transitionDefinitionName>time expired</transitionDefinitionName>
          <condition></condition>
          <description>This transition is taken when the pre-determined time has expired.</description>
          <trigger>manual</trigger>
          <propertySheet>
          </propertySheet>
          <targetState>End</targetState>
        </transitionDefinition>
      </stateDefinition>
      <stateDefinition>
        <stateDefinitionName>End</stateDefinitionName>
        <description>All good things come to an end</description>
        <startable>0</startable>
        <propertySheet>
        </propertySheet>
      </stateDefinition>
    </workflowDefinition>
    <workflowDefinition>
      <workflowDefinitionName>Test-loopForever</workflowDefinitionName>
      <description>A test workflow that just hangs around for ever.</description>
      <workflowNameTemplate></workflowNameTemplate>
      <propertySheet>
      </propertySheet>
      <stateDefinition>
        <stateDefinitionName>InTheBeginning</stateDefinitionName>
        <description>Everything has to start somewhere</description>
        <startable>1</startable>
        <propertySheet>
        </propertySheet>
        <transitionDefinition>
          <transitionDefinitionName>specification delivered</transitionDefinitionName>
          <condition></condition>
          <description></description>
          <trigger>onEnter</trigger>
          <propertySheet>
          </propertySheet>
          <targetState>Coding</targetState>
        </transitionDefinition>
      </stateDefinition>
      <stateDefinition>
        <stateDefinitionName>Coding</stateDefinitionName>
        <description></description>
        <startable>0</startable>
        <subprocedure>TransitionIn</subprocedure>
        <subproject></subproject>
        <substartingState></substartingState>
        <subworkflowDefinition></subworkflowDefinition>
        <actualParameters>
          <property>
            <propertyName>n</propertyName>
            <expandable>1</expandable>
            <value>25</value>
          </property>
          <property>
            <propertyName>transition</propertyName>
            <expandable>1</expandable>
            <value>complete</value>
          </property>
          <property>
            <propertyName>units</propertyName>
            <expandable>1</expandable>
            <value>minutes</value>
          </property>
        </actualParameters>
        <propertySheet>
        </propertySheet>
        <transitionDefinition>
          <transitionDefinitionName>complete</transitionDefinitionName>
          <condition></condition>
          <description></description>
          <trigger>manual</trigger>
          <propertySheet>
          </propertySheet>
          <targetState>Testing</targetState>
        </transitionDefinition>
        <transitionDefinition>
          <transitionDefinitionName>cancel project</transitionDefinitionName>
          <condition></condition>
          <description></description>
          <trigger>manual</trigger>
          <propertySheet>
          </propertySheet>
          <targetState>Done</targetState>
        </transitionDefinition>
      </stateDefinition>
      <stateDefinition>
        <stateDefinitionName>Testing</stateDefinitionName>
        <description></description>
        <startable>0</startable>
        <subprocedure>TransitionIn</subprocedure>
        <subproject></subproject>
        <substartingState></substartingState>
        <subworkflowDefinition></subworkflowDefinition>
        <actualParameters>
          <property>
            <propertyName>n</propertyName>
            <expandable>1</expandable>
            <value>20</value>
          </property>
          <property>
            <propertyName>transition</propertyName>
            <expandable>1</expandable>
            <value>failed</value>
          </property>
          <property>
            <propertyName>units</propertyName>
            <expandable>1</expandable>
            <value>minutes</value>
          </property>
        </actualParameters>
        <propertySheet>
        </propertySheet>
        <transitionDefinition>
          <transitionDefinitionName>failed</transitionDefinitionName>
          <condition></condition>
          <description></description>
          <trigger>manual</trigger>
          <propertySheet>
          </propertySheet>
          <targetState>Coding</targetState>
        </transitionDefinition>
        <transitionDefinition>
          <transitionDefinitionName>complete project</transitionDefinitionName>
          <condition></condition>
          <description></description>
          <trigger>manual</trigger>
          <propertySheet>
          </propertySheet>
          <targetState>Done</targetState>
        </transitionDefinition>
      </stateDefinition>
      <stateDefinition>
        <stateDefinitionName>Done</stateDefinitionName>
        <description></description>
        <startable>0</startable>
        <propertySheet>
        </propertySheet>
      </stateDefinition>
    </workflowDefinition>
  </project>
</exportedData>
