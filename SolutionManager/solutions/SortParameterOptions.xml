<?xml version="1.0" encoding="UTF-8"?>
<exportedData xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="commander.xsd" version="61" buildLabel="build_main_58126_2013.03.19_12:45:34" buildVersion="4.2.1.58126" passkey="b16e7e4ec237d4e13f4253a031c37b7da3af29c1">
  <exportPath>/projects/Sort parameter options/procedures/Sort parameter options</exportPath>
  <procedure>
    <procedureName>Sort parameter options</procedureName>
    <description></description>
    <jobNameTemplate>sort-parameter-options$[jobId]</jobNameTemplate>
    <resourceName></resourceName>
    <timeLimit></timeLimit>
    <timeLimitUnits>minutes</timeLimitUnits>
    <workspaceName></workspaceName>
    <propertySheet>
      <property>
        <propertyName>ec_customEditorData</propertyName>
        <propertySheet>
          <property>
            <propertyName>parameters</propertyName>
            <propertySheet>
              <property>
                <propertyName>pathToOptions</propertyName>
                <propertySheet>
                  <property>
                    <propertyName>formType</propertyName>
                    <expandable>1</expandable>
                    <value>standard</value>
                  </property>
                </propertySheet>
              </property>
            </propertySheet>
          </property>
        </propertySheet>
      </property>
    </propertySheet>
    <formalParameter>
      <formalParameterName>pathToOptions</formalParameterName>
      <defaultValue></defaultValue>
      <description>Property path to the sheet containing the parameter options.  This is the sheet which should contain a property called optionCount and nested sheets option1, option2, and so on.</description>
      <expansionDeferred>0</expansionDeferred>
      <required>1</required>
      <type>entry</type>
    </formalParameter>
    <step>
      <stepName>Sort</stepName>
      <alwaysRun>0</alwaysRun>
      <broadcast>0</broadcast>
      <command>use strict;&#10;use warnings;&#10;use ElectricCommander;&#10;use XML::XPath;&#10;&#10;my $path = "$[pathToOptions]";&#10;&#10;my $ec = new ElectricCommander();&#10;&#10;my $optionCount;&#10;my %parameters = ();&#10;my $response = $ec-&gt;getProperties({path =&gt; $path, recurse =&gt; 1});&#10;print "ORIGINAL ORDER:\n";&#10;foreach my $property ($response-&gt;findnodes("/responses/response/propertySheet/property")) {&#10;    my $name = $property-&gt;findvalue("propertyName");&#10;    if ($name =~ m/option(\d+)/) {&#10;        my $optionNumber = $1;&#10;        my $text;&#10;        my $value;&#10;        foreach my $nestedProperty ($property-&gt;findnodes("propertySheet/property")) {&#10;            my $nestedName = $nestedProperty-&gt;findvalue("propertyName");&#10;            if ($nestedName eq "text") {&#10;                $text = $nestedProperty-&gt;findvalue("value")-&gt;string_value;&#10;            } elsif ($nestedName eq "value") {&#10;                $value = $nestedProperty-&gt;findvalue("value")-&gt;string_value;&#10;            }&#10;        }&#10;        if (defined($text) &amp;&amp; defined($value)) {&#10;            print "$text -&gt; $value\n";&#10;            $parameters{$text} = $value;&#10;        } else {&#10;            print "Error: option$optionNumber is malformed";&#10;            exit 1;&#10;        }&#10;    } elsif ($name eq "optionCount") {&#10;        $optionCount = $property-&gt;findvalue("value")-&gt;string_value;&#10;    }&#10;}&#10;&#10;if (!defined($optionCount) || $optionCount ne keys(%parameters)) {&#10;    print "Error: option count doesn't match number of options\n";&#10;    exit 1;&#10;}&#10;&#10;print "\nNEW ORDER:\n";&#10;my $i = 1;&#10;foreach my $text (sort(keys(%parameters))) {&#10;    my $value = $parameters{$text};&#10;    print "$text -&gt; $value\n";&#10;    $ec-&gt;setProperty("$path/option$i/text", $text);&#10;    $ec-&gt;setProperty("$path/option$i/value", $value);&#10;    $i ++;&#10;}&#10;$ec-&gt;setProperty("$path/optionCount", $optionCount);&#10;</command>
      <condition></condition>
      <description></description>
      <errorHandling>failProcedure</errorHandling>
      <exclusiveMode>none</exclusiveMode>
      <logFileName></logFileName>
      <parallel>0</parallel>
      <postProcessor>postp</postProcessor>
      <precondition></precondition>
      <releaseMode>none</releaseMode>
      <resourceName></resourceName>
      <shell>ec-perl</shell>
      <timeLimit></timeLimit>
      <timeLimitUnits>minutes</timeLimitUnits>
      <workingDirectory></workingDirectory>
      <workspaceName></workspaceName>
      <propertySheet>
      </propertySheet>
    </step>
  </procedure>
</exportedData>
